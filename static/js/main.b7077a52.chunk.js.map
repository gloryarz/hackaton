{"version":3,"sources":["Components/Carrusel/Carrusel.jsx","Components/Matricula/Matricula.jsx","Components/Verificacion/Verificacion.jsx","Components/Servicio/Servicio.jsx","Components/Pago/Pago.jsx","Components/Confirmacion/Confirmacion.jsx","Components/Modal/Modal.jsx","Components/App/App.js","serviceWorker.js","index.js"],"names":["Carrusel","react_default","a","createElement","NavLink","to","Matricula","Verificacion","Servicio","Pago","Confirmacion","Modal","App","state","BrowserRouter","Switch","Route","path","component","exact","Error","Component","Boolean","window","location","hostname","match","ReactDOM","render","Components_App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6QAgBeA,EAbE,WACf,OACEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,oBAEEF,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAASC,GAAG,cAAZ,aCOKC,EAbG,WAChB,OACEL,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,qBAEEF,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAASC,GAAG,iBAAZ,aCOKE,EAbM,WACnB,OACEN,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,wBAEEF,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAASC,GAAG,aAAZ,aCOKG,EAbE,WACf,OACEP,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,oBAEEF,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAASC,GAAG,SAAZ,aCOKI,EAbF,WACX,OACER,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,gBAEEF,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAASC,GAAG,iBAAZ,aCOKK,EAbM,WACnB,OACET,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,wBAEEF,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAASC,GAAG,UAAZ,aCGKM,EAVD,WACV,OACIV,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,oBC2BGS,6MApBbC,MAAQ,2EAEN,OACEZ,EAAAC,EAAAC,cAACW,EAAA,EAAD,KACEb,EAAAC,EAAAC,cAACY,EAAA,EAAD,KACEd,EAAAC,EAAAC,cAACa,EAAA,EAAD,CAAOC,KAAK,IAAIC,UAAWlB,EAAUmB,OAAK,IAC1ClB,EAAAC,EAAAC,cAACa,EAAA,EAAD,CAAOC,KAAK,aAAaC,UAAWZ,IACpCL,EAAAC,EAAAC,cAACa,EAAA,EAAD,CAAOC,KAAK,gBAAgBC,UAAWX,IACvCN,EAAAC,EAAAC,cAACa,EAAA,EAAD,CAAOC,KAAK,YAAYC,UAAWV,IACnCP,EAAAC,EAAAC,cAACa,EAAA,EAAD,CAAOC,KAAK,QAAQC,UAAWT,IAC/BR,EAAAC,EAAAC,cAACa,EAAA,EAAD,CAAOC,KAAK,gBAAgBC,UAAWR,IACvCT,EAAAC,EAAAC,cAACa,EAAA,EAAD,CAAOC,KAAK,SAASC,UAAWP,IAChCV,EAAAC,EAAAC,cAACa,EAAA,EAAD,CAAOE,UAAWE,iBAbVC,aCCEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO3B,EAAAC,EAAAC,cAAC0B,EAAD,MAASC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.b7077a52.chunk.js","sourcesContent":["import React from \"react\";\nimport { NavLink } from \"react-router-dom\";\n\nconst Carrusel = () => {\n  return (\n    <div>\n      <p>\n        Carrusel\n        <button>\n          <NavLink to=\"/matricula\">Boton</NavLink>\n        </button>\n      </p>\n    </div>\n  );\n};\n\nexport default Carrusel;\n","import React from \"react\";\nimport { NavLink } from \"react-router-dom\";\n\nconst Matricula = () => {\n  return (\n    <div>\n      <p>\n        Matricula\n        <button>\n          <NavLink to=\"/verificacion\">Boton</NavLink>\n        </button>\n      </p>\n    </div>\n  );\n};\n\nexport default Matricula;\n","import React from \"react\";\nimport { NavLink } from \"react-router-dom\";\n\nconst Verificacion = () => {\n  return (\n    <div>\n      <p>\n        Verificacion\n        <button>\n          <NavLink to=\"/servicio\">Boton</NavLink>\n        </button>\n      </p>\n    </div>\n  );\n};\n\nexport default Verificacion;\n","import React from \"react\";\nimport { NavLink } from \"react-router-dom\";\n\nconst Servicio = () => {\n  return (\n    <div>\n      <p>\n        Servicio\n        <button>\n          <NavLink to=\"/pago\">Boton</NavLink>\n        </button>\n      </p>\n    </div>\n  );\n};\n\nexport default Servicio;\n","import React from \"react\";\nimport { NavLink } from \"react-router-dom\";\n\nconst Pago = () => {\n  return (\n    <div>\n      <p>\n        Pago\n        <button>\n          <NavLink to=\"/confirmacion\">Boton</NavLink>\n        </button>\n      </p>\n    </div>\n  );\n};\n\nexport default Pago;\n","import React from \"react\";\nimport { NavLink } from \"react-router-dom\";\n\nconst Confirmacion = () => {\n  return (\n    <div>\n      <p>\n        Confirmacion\n        <button>\n          <NavLink to=\"/modal\">Boton</NavLink>\n        </button>\n      </p>\n    </div>\n  );\n};\n\nexport default Confirmacion;\n","import React from 'react';\n\nconst Modal = () => {\n    return (\n        <div>\n            <p>\n                Modal\n            </p>\n        </div>\n    )\n}\n\nexport default Modal;","import React, { Component } from 'react';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport  Carrusel from '../Carrusel/Carrusel';\nimport  Matricula from '../Matricula/Matricula';\nimport  Verificacion from '../Verificacion/Verificacion';\nimport  Servicio from '../Servicio/Servicio';\nimport  Pago from '../Pago/Pago';\nimport  Confirmacion from '../Confirmacion/Confirmacion';\nimport  Modal from '../Modal/Modal';\n\n\nclass App extends Component {\n  state = {  }\n  render() { \n    return ( \n      <BrowserRouter>\n        <Switch>\n          <Route path=\"/\" component={Carrusel} exact />\n          <Route path=\"/matricula\" component={Matricula} />   \n          <Route path=\"/verificacion\" component={Verificacion} />  \n          <Route path=\"/servicio\" component={Servicio} /> \n          <Route path=\"/pago\" component={Pago} />  \n          <Route path=\"/confirmacion\" component={Confirmacion} />   \n          <Route path=\"/modal\" component={Modal} />  \n          <Route component={Error} />      \n        </Switch>\n         \n      </BrowserRouter>\n     );\n  }\n}\n \nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}